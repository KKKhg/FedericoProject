<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mapperInterface.HeadOfficeMapper">

<!-- resultMap 설정 ============================================================-->
	<resultMap type="vo.FcOrderDetailVO" id="FcOrderDetailVO">
		<result column="fcOrderDetailSeq" property="fcOrderDetailSeq"/>
		<result column="itemfcOrderSeqName" property="fcOrderSeq"/>
		<result column="itemIndex" property="itemIndex"/>
		<result column="itemQty" property="itemQty"/>
		<collection property="itemInfoVO" resultMap="ItemInfoVO"/>
	</resultMap>

 
  <resultMap type="vo.ItemInfoVO" id="ItemInfoVO">
		<result column="itemIndex" property="itemIndex"/>
		<result column="itemName" property="itemName"/>
		<result column="itemFlag" property="itemFlag"/>
		<result column="itemUnit" property="itemUnit"/>
		<result column="itemPrice" property="itemPrice"/>
	</resultMap>
<!-- resultMap 설정 ============================================================-->  
	
	<!-- 회원 연령대 조회 -->
	<select id="selectMemberAgeGroup" resultType="vo.ChartVO">
		<![CDATA[
		SELECT A.AGEGROUP chartLabel, COUNT(C.CLIENTID) chartCount
		FROM (SELECT LEVEL*10 || '대' AGEGROUP
		        FROM DUAL
		        CONNECT BY LEVEL <10) A
		LEFT JOIN (SELECT CLIENTID,
		        CASE WHEN TO_NUMBER(SUBSTR(CLIENTBIRTHDAY, 1, 2)) <= TO_NUMBER(TO_CHAR(SYSDATE, 'YY')) THEN TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY'))- (2000+ TO_NUMBER(SUBSTR(CLIENTBIRTHDAY, 1, 2)) + 1)
		            WHEN TO_NUMBER(SUBSTR(CLIENTBIRTHDAY, 1, 2)) > TO_NUMBER(TO_CHAR(SYSDATE, 'YY')) THEN TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY'))- (1900+TO_NUMBER(SUBSTR(CLIENTBIRTHDAY, 1, 2)) + 1)
		            END AS AGE
		        FROM CLIENT) C ON A.AGEGROUP = TRUNC(C.AGE/10)*10||'대'
		GROUP BY A.AGEGROUP
		ORDER BY A.AGEGROUP	 ]]>	
	</select>
	
	
	<!-- 연령대별 메뉴 판매량 by 지점 -->
	<select id="selectStatsAgeGroupMenuSales" resultType="vo.ChartVO">
		SELECT M.MENUNAME chartLabel, SUM(A.MENUQTY) chartCount
		FROM MENUINFO M
		LEFT JOIN (SELECT I.CLIENTID, D.MENUINDEX, D.MENUQTY
		        FROM (SELECT CLIENTID,
	  <![CDATA[ CASE WHEN TO_NUMBER(SUBSTR(CLIENTBIRTHDAY, 1, 2)) <= TO_NUMBER(TO_CHAR(SYSDATE, 'YY')) THEN TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY'))- (2000+ TO_NUMBER(SUBSTR(CLIENTBIRTHDAY, 1, 2)) + 1)
		            WHEN TO_NUMBER(SUBSTR(CLIENTBIRTHDAY, 1, 2)) > TO_NUMBER(TO_CHAR(SYSDATE, 'YY')) THEN TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY'))- (1900+TO_NUMBER(SUBSTR(CLIENTBIRTHDAY, 1, 2)) + 1)
		            END AS AGE FROM CLIENT) I ]]>
		            JOIN ORDERLIST O ON O.CLIENTID = I.CLIENTID 
		            <if test="fcId != null and fcId != ''">
		          	  AND FCID = #{fcId}
		            </if>
		            JOIN ORDERDETAILLIST D ON D.ORDERNUMBER = O.ORDERNUMBER
		            WHERE TO_CHAR(TRUNC(I.AGE/10)*10) = #{ageGroup} ) A 
		            ON A.MENUINDEX = M.MENUINDEX
		GROUP BY M.MENUNAME
		ORDER BY SUM(A.MENUQTY) DESC NULLS LAST	
	</select>
	
	
	<!-- 연령대별 매출 by 년도 and 지점 -->
	<select id="selectStatsAgeGroupSales" resultType="vo.ChartVO">
		<![CDATA[
			SELECT A.AGEGROUP chartLabel, SUM(M.MENUPRICE*D.MENUQTY) chartCount
			FROM (SELECT LEVEL*10 AGEGROUP
			        FROM DUAL
			        CONNECT BY LEVEL <10) A
			LEFT JOIN (SELECT CLIENTID,
			        CASE WHEN TO_NUMBER(SUBSTR(CLIENTBIRTHDAY, 1, 2)) <= TO_NUMBER(TO_CHAR(SYSDATE, 'YY')) THEN TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY'))- (2000+ TO_NUMBER(SUBSTR(CLIENTBIRTHDAY, 1, 2)) + 1)
			            WHEN TO_NUMBER(SUBSTR(CLIENTBIRTHDAY, 1, 2)) > TO_NUMBER(TO_CHAR(SYSDATE, 'YY')) THEN TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY'))- (1900+TO_NUMBER(SUBSTR(CLIENTBIRTHDAY, 1, 2)) + 1)
			            END AS AGE ]]>
			        FROM CLIENT) C ON A.AGEGROUP = TRUNC(C.AGE/10)*10
			LEFT JOIN ORDERLIST O ON O.CLIENTID = C.CLIENTID AND TO_CHAR(TRUNC(O.ORDERDATE, 'YY'),'YYYYMMDD') = #{baseDay}
			<if test="fcId != null and fcId != ''">
				AND O.FCID = #{fcId}
			</if>
			LEFT JOIN ORDERDETAILLIST D ON O.ORDERNUMBER = D.ORDERNUMBER
			LEFT JOIN MENUINFO M ON D.MENUINDEX = M.MENUINDEX
			GROUP BY A.AGEGROUP
			ORDER BY A.AGEGROUP		
		
	</select>
	
	
	
	<!-- 가맹점 개설현황 - 매개변수로 where 조건 -->
	<select id="selectNumberOfFranchise" parameterType="String" resultType="vo.ChartVO">
		SELECT COUNT(*) chartCount FROM FRANCHISE
		<if test="_parameter == 'NEW'.toString()">
			WHERE TO_CHAR(CREATEDDATE, 'YYMM') = TO_CHAR(SYSDATE,'YYMM')
		</if>		
	</select>

	
	<!-- 가맹점 자재발주 등록(발주먼저등록), return fcOrderSeq -->
	<insert id="insertFcOrder" parameterType="vo.FcOrderVO">
		<selectKey keyProperty="fcOrderSeq" resultType="int" order="BEFORE">
			SELECT nvl(max(fcorderseq),0)+1 FROM fcorder
		</selectKey>
		INSERT INTO fcorder (fcorderseq, fcid, fcorderdate, fcorderflag)
		VALUES (#{fcOrderSeq}, #{fcId}, sysdate, 'N')
	</insert>
	
	<!-- 가맹점 자재발주 상세내역 등록 -->
	<insert id="insertFcOrderDetail">
		<selectKey keyProperty="fcOrderDetailSeq" resultType="int" order="BEFORE">
			SELECT nvl(max(fcorderdetailseq),0) FROM fcorderdetail
		</selectKey>
		INSERT INTO fcorderdetail(fcorderdetailseq, fcOrderSeq, Itemindex, Itemqty)
		<foreach collection="list" item="vo" separator="UNION" index="index">
			SELECT #{fcOrderDetailSeq}+1+#{index}, #{vo.fcOrderSeq}, #{vo.itemIndex}, #{vo.itemQty} FROM DUAL
		</foreach>
	</insert>
	
	<!-- 본사 홈에 띄울 가맹점 미처리 자재발주 -->
	<select id="selectFcOrderSumPirce" resultType="vo.FcOrderVO">
		SELECT O.FCORDERSEQ, O.FCID, TO_CHAR(O.FCORDERDATE, 'YY/MM/DD HH24:MI') fcOrderDate, SUM(D.ITEMQTY * I.ITEMPRICE) sumPrice
		FROM FCORDER O
		JOIN FCORDERDETAIL D ON O.FCORDERSEQ = D.FCORDERSEQ
		JOIN ITEMINFO I ON I.ITEMINDEX = D.ITEMINDEX
		WHERE FCORDERFLAG = 'N'
		GROUP BY O.FCORDERSEQ, O.FCID, O.FCORDERDATE
		ORDER BY FCORDERSEQ 	
	</select>



	
  
	<!-- itemflag에 따라 select item -->
	<select id="selectItembyFlag" resultType="vo.ItemInfoVO">
		SELECT * FROM iteminfo WHERE itemflag = #{itemFlag} ORDER BY itemname
	</select>
	
	<!-- 가맹점 발주내역 처리완료로 변경 -->
	<update id="fcOrderSeqUpdate" parameterType="hashmap">
		UPDATE fcorder SET fcorderflag = #{flag} where fcorderseq = #{vo.fcOrderSeq}
	</update>
	
	
	
	<!-- 가맹점 발주내역 상세보기(발주번호 별로) -->
	<select id="selectFcOrderDetailbyOrderNumber"  resultMap="FcOrderDetailVO">
		SELECT o.*,i.* FROM fcorderdetail o, iteminfo i  WHERE o.itemindex = i.itemindex and fcorderseq = #{fcOrderSeq} 
	</select>
  
	<!-- searchFcOrderRows -->
	<select id="searchFcOrderRows" parameterType="hashmap" resultType="int">
		SELECT COUNT(*) FROM fcorder 
		<include refid="fcOrderSearch"></include>
		<if test="flag != null and value != '' ">
			and fcorderflag = #{flag}
		</if>
	</select>  
	
	<!-- 가맹점 발주정보 서치,페이징 -->
	<select id="searchFcOrder" parameterType="hashmap" resultType="vo.FcOrderVO" >
		SELECT fcorderseq, fcid, to_char(fcorderdate,'yy/mm/dd hh24:mi') as fcorderdate, fcorderflag FROM fcorder
		 <include refid="fcOrderSearch"></include>
		<if test="flag != null and value != '' ">
			and fcorderflag = #{flag}
		</if>
		ORDER BY fcorderdate desc
		OFFSET #{cri.sno}-1 ROWS FETCH NEXT #{cri.rowsPerPage} ROWS ONLY 
	</select>
	
	<sql id="fcOrderSearch">
		<if test="cri.keyword != null">
			<bind name="keyVal" value="'%'+cri.keyword+'%'"/>
		</if>
		<choose>
			<when test="cri.searchType == 'fcId'.toString()">
				WHERE fcId like #{keyVal}
			</when>
			<otherwise>WHERE 1=1</otherwise>
		</choose>
	</sql>
	

	<delete id="itemdelete">
		DELETE iteminfo WHERE itemindex = #{itemIndex}
	</delete>
	

	<!-- itemupdate 본사자재 정보수정 -->
	<update id="itemUpdate">
		UPDATE iteminfo SET itemname = #{itemName}, itemflag = #{itemFlag}, itemunit = #{itemUnit}, itemprice = #{itemPrice}
		WHERE itemindex = #{itemIndex}
	</update>

	<!-- selectOneItem 본사자재 1건출력 -->
	<select id="selectOneItem" resultType="vo.ItemInfoVO">
		SELECT * FROM iteminfo where itemIndex=#{itemIndex}
	</select>

	<!-- selectAllItem 본사자재 모두출력 -->
	<select id="selectAllItem" resultType="vo.ItemInfoVO">
		SELECT * FROM iteminfo order by itemindex
	</select>
	
	<!-- searchItemRow -->
	<select id="searchItemRows" resultType="int">
		SELECT COUNT(*) FROM iteminfo <include refid="itemSearch"></include>
	</select>
	
	<!-- searchItem 본사자재 서치,페이징 -->
	<select id="searchItemList" resultType="vo.ItemInfoVO">
		SELECT * FROM iteminfo <include refid="itemSearch"></include> 
		ORDER BY itemindex
		OFFSET #{sno}-1 ROWS FETCH NEXT #{rowsPerPage} ROWS ONLY
	</select>

	<sql id="itemSearch" >
		<if test="keyword != null">
			<bind name="keyVal" value="'%'+keyword+'%'"/>
		</if>
		<choose>
			<when test="searchType == 'name'.toString()">
				where itemname LIKE #{keyVal} 
				 <!-- and title Like  CONCAT('%',CONCAT(#{keyword},'%')) 
                 and title Like  '%' || #{keyword} || '%' ) -->
			</when>
			<when test="searchType == 'flag'.toString()">
				where itemflag LIKE #{keyVal} 
			</when>			
			<otherwise></otherwise>						
		</choose>
	</sql>


	<!-- iteminfo insrt 본사 자재 입력 -->
	<insert id="iteminsert">
		INSERT INTO iteminfo(itemindex, itemname, itemflag, itemunit, itemprice)
		VALUES((select nvl(max(itemindex),0)+1 from iteminfo), #{itemName}, #{itemFlag}, #{itemUnit}, #{itemPrice})
	</insert>
	
	
	
<!-- ===================================< 사원관리 >======================================== -->
	<!-- ** LoginSelectOne -->
	<select id="loginSelectOne" resultType="vo.HeadOfficeVO">
		SELECT * FROM HeadOffice
		WHERE HOID = #{staffVo.staffCode}
	</select>
	<!-- ** SelectOne -->
	<select id="selectOne" resultType="vo.StaffVO">
		SELECT * FROM staff WHERE
		StaffCode = #{staffCode}
	</select>


	<!-- staff 인서트 -->
	<insert id="staffInsert">
		INSERT INTO staff VALUES(#{staffCode}, #{staffName}, #{staffPosition}, #{staffPhone}, #{staffEmail})
	</insert>
	
	
	<!-- HeadOffice 인서트 -->
	<insert id="headOfficeInsert">
		INSERT INTO headOffice(hoid, hoPassword) VALUES(#{staffVo.staffCode}, #{hoPassword})
	</insert>
	
	
	
	<!-- stafflist 전부출력 -->
	<select id="selectMList" resultType="vo.StaffVO">
		SELECT * FROM staff ORDER BY staffCode desc
	</select>
	
		<!-- searchStaffRow -->
	<select id="searchStaffRows" resultType="int">
		SELECT COUNT(*) FROM Staff <include refid="staffSearch"></include>
	</select>

		<!-- searchStaff 서치,페이징 -->
	<select id="searchStaffList" resultType="vo.StaffVO">
		SELECT * FROM staff <include refid="staffSearch"></include> 
		ORDER BY staffCode desc
		OFFSET #{sno}-1 ROWS FETCH NEXT #{rowsPerPage} ROWS ONLY
	</select>

	<sql id="staffSearch" >
		<if test="keyword != null">
			<bind name="keyVal" value="'%'+keyword+'%'"/>
		</if>
		<choose>
			<when test="searchType == 'code'.toString()">
				where staffCode LIKE #{keyVal} 
				 <!-- and title Like  CONCAT('%',CONCAT(#{keyword},'%')) 
                 and title Like  '%' || #{keyword} || '%' ) -->
			</when>
			<when test="searchType == 'name'.toString()">
				where staffName LIKE #{keyVal} 
			</when>			
			<when test="searchType == 'position'.toString()">
				where staffPosition LIKE #{keyVal} 
			</when>			
			<when test="searchType == 'phone'.toString()">
				where staffPhone LIKE #{keyVal} 
			</when>			
			<when test="searchType == 'email'.toString()">
				where staffEmail LIKE #{keyVal} 
			</when>			
			<otherwise></otherwise>						
		</choose>
	</sql>

 	 <!-- headOffice PW 변경 -->
	<insert id="headOfficePwUpdate">
	UPDATE headOffice SET hoPassword = #{hoPassword} WHERE hoid = #{staffVo.staffCode}
	</insert>
	
	
	<!-- headOffice 삭제 -->
	<delete id="headOfficeDelete">
	DELETE FROM headOffice where hoid = #{staffVo.staffCode}
	</delete>
	
	
	<!-- staff 삭제 -->
	<delete id="staffDelete">
		DELETE FROM staff where staffCode = #{staffCode}
	</delete>
	
	
	<!-- staff 업데이트 -->
	<insert id="staffUpdate">
		UPDATE staff 
		SET staffName=#{staffName}, staffPosition= #{staffPosition}, staffPhone=#{staffPhone},staffEmail=#{staffEmail} 
		WHERE staffCode = #{staffCode}
	</insert>

<!-- ===================================< 가맹점관리 >=================================== -->


	<!-- searchFcRow -->
	<select id="searchFcRows" resultType="int">
		SELECT COUNT(*) FROM franchise <include refid="fcSearch"></include>
	</select>


	<!-- searchItem 본사자재 서치,페이징 -->
	<select id="searchFcList" resultType="vo.FranchiseVO">
		SELECT * FROM franchise <include refid="fcSearch"></include> 
		ORDER BY length(fcid) desc,fcid desc
		OFFSET #{sno}-1 ROWS FETCH NEXT #{rowsPerPage} ROWS ONLY
	</select>

	<sql id="fcSearch" >
		<if test="keyword != null">
			<bind name="keyVal" value="'%'+keyword+'%'"/>
		</if>
		<choose>
			<when test="searchType == 'fcid'.toString()">
				where fcId LIKE #{keyVal} and fcClose='N'
				 <!-- and title Like  CONCAT('%',CONCAT(#{keyword},'%')) 
                 and title Like  '%' || #{keyword} || '%' ) -->
			</when>
			<when test="searchType == 'fcname'.toString()">
				where fcName LIKE #{keyVal} and fcClose='N'
			</when>			
			<when test="searchType == 'phone'.toString()">
				where fcPhone LIKE #{keyVal}  and fcClose='N'
			</when>			
			<when test="searchType == 'area'.toString()">
				where fcArea LIKE #{keyVal} and fcClose='N'
			</when>			
			<when test="searchType == 'address'.toString()">
				where fcAddress LIKE #{keyVal} and fcClose='N'
			</when>			 
			<when test="searchType == 'staff'.toString()">
				where hoId LIKE #{keyVal} and fcClose='N'
			</when>			
			<otherwise>where fcClose='N'</otherwise>						
		</choose>
	</sql>


	 <!-- notice 글등록 -->
	<insert id="noticeInsert">
	INSERT INTO NOTICEBOARD VALUES((select nvl(max(seq),0)+1 from NOTICEBOARD n),
		#{title}, #{id}, #{content}, sysdate, 0, #{noticeFlag})
	</insert>
	
	
	<!-- notice 삭제 -->
	<delete id="noticeDelete">
	DELETE FROM NOTICEBOARD where seq = #{seq}
	</delete>
	
	
	<!-- notice 업데이트 -->
	<insert id="noticeUpdate">
		UPDATE NOTICEBOARD 
		SET title = #{title}, content=#{content}, noticeFlag=#{noticeFlag} , id=#{id}
		WHERE seq = #{seq}
	</insert>





	<!-- ============================={ 통계 }================================ -->
	<!-- 최근 1년 월별 통계 -->
	<select id="monthChart" resultType="vo.ChartVO">
	SELECT TO_CHAR(orderdate, 'YYYYMM') AS chartLabel , count(*) AS chartCount
	FROM orderlist 
	WHERE TO_CHAR(orderdate, 'YYYYMM')
	BETWEEN to_char(ADD_MONTHS(sysdate,-12),'YYYYMMDD') AND to_char(sysdate,'YYYYMMDD') 
	GROUP BY to_char(ORDERDATE , 'YYYYMM')
	ORDER BY chartLabel
	</select>
	
	<!-- 요일별 통계 -->
	<select id="dayChart" resultType="vo.ChartVO">
	SELECT case to_char(orderdate,'d') 
	   when '1' then '일요일'
       when '2' then '월요일'
       when '3' then '화요일'
       when '4' then '수요일'
       when '5' then '목요일'
       when '6' then '금요일'
       when '7' then '토요일'
       END "chartLabel"
	, count(*) AS chartCount FROM ORDERLIST o 
	GROUP BY to_char(orderdate,'d')
	ORDER BY to_char(orderdate,'d') ASC
	</select>

	<!-- ============================={ 이벤트 페이지 }================================ -->
	 <!-- 이벤트 게시판 글 등록 -->
	<insert id="eventInsert">
	INSERT INTO EVENTBOARD(eventSeq, title, hoId, content, startDate, endDate) VALUES((select nvl(max(eventSeq),0)+1 from EVENTBOARD n),
		#{title}, #{hoId}, #{content}, #{startDate}, #{endDate})
	</insert>
	
	
	<!-- 이벤트 게시판 글 삭제 -->
	<delete id="eventDelete">
	DELETE FROM EVENTBOARD where eventSeq = #{eventSeq}
	</delete>
	
	
	<!-- 이벤트 게시판 글 수정 -->
	<insert id="eventUpdate">
		UPDATE EVENTBOARD 
		SET title = #{title}, content=#{content}, hoId=#{hoId}
		WHERE eventSeq = #{eventSeq}
	</insert>	

	<!-- 이벤트 게시판 클릭시 Detail 출력 -->
	<select id="selectDetailEventBoard" resultType="vo.EventBoardVO">
		SELECT eventSeq, title, hoId, content, startDate, endDate
		FROM eventBoard
		WHERE eventSeq=#{eventSeq}
	</select>
	


</mapper>